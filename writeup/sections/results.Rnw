\section{Results}

Data from simulated populations with varying maximum population ($max.pop$), maximum age ($max.age$), and fertility rate ($fertility$) were collected and compared with estimated values from the Markov Model. When not veried, the default values of maximum population, maximum age, and fertility rate were 20, 80, and 0.2 respectively.

<<r,echo=FALSE>>=
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
@

<<cache=TRUE, echo=FALSE>>=
# Load simulation data
pop<-read.table("../simulations/popsim.tab",sep="\t",header=TRUE)
age<-read.table("../simulations/agesim.tab",sep="\t",header=TRUE)
fer<-read.table("../simulations/fertilitysim.tab",sep="\t",header=TRUE)
@

<<cache=TRUE, echo=FALSE, message=FALSE>>=
require(scales)

p1 <- ggplot(pop,aes(x=as.factor(max.pop),y=survival.time)) +
  geom_violin(scale='area') +
  geom_boxplot(alpha=0.1, width=0.2, outlier.size=.1) +
  xlab('Maximum Population') +
  ylab('Survival Time') +
  scale_y_continuous(trans='log2', breaks=trans_breaks('log2', function(x) round(2^x)))

p2 <- ggplot(age,aes(x=as.factor(max.age),y=survival.time)) +
  geom_violin(scale='area') +
  geom_boxplot(alpha=0.1, width=0.2, outlier.size=.1) +
  xlab('Maximum Age') +
  ylab('Survival Time') +
  scale_y_continuous(trans='log2', breaks=trans_breaks('log2', function(x) round(2^x)))

p3 <- ggplot(fer,aes(x=as.factor(100 * fertility),y=survival.time)) +
  geom_violin(scale='area') +
  geom_boxplot(alpha=0.1, width=0.2, outlier.size=.1) +
  xlab('Fertility (%)') +
  ylab('Survival Time') +
  scale_y_continuous(trans='log2', breaks=trans_breaks('log2', function(x) round(2^x)))
multiplot(p1,p2,p3,cols=2)
@

The observed linear relationship between maximum population $2k$ and log transformed survival time is consistent with the view that a larger population is more robust to random changes in female/male composition. Recall that a female-sparce or female-saturated population results in population failure.

However, increasing the fertility rate of the females in the population increased the robustness of the population up to a certain limit. Above a fertility rate of 0.2, the log transformed survival time still increases but at a slower rate. While more females were within the fertile range, the population size placed a limit on how often children were born.

Inversely, increasing the max age of the population decreased the log transformed survival time. This effectively reduces the number of births and deaths since the maximum population can only be $2k$. Increasing the average age decreases the proportion of fertile females in the total population. 

In order to better understand the distribution of log survival time, we plotted histograms under each of the results. For the most part, the distributions looked like gamma distributions. The gamma function has two parameters ($\alpha$, $\beta$).

% scrap after this
<<echo=FALSE,eval=FALSE>>=
qplot(as.factor(max.pop),log(survival.time),data=pop,geom="boxplot")
qplot(as.factor(max.age),log(survival.time),data=age,geom="boxplot")
qplot(as.factor(fertility),log(survival.time),data=fer,geom="boxplot")

qplot(log(survival.time),data=pop,binwidth=10/30)+facet_grid(max.pop~.)
qplot(log(survival.time),data=age,binwidth=10/30)+facet_grid(max.age~.)
qplot(log(survival.time),data=fer,binwidth=10/30)+facet_grid(fertility~.)
@

