\section{Results}

Simulations were run varying maximum population ($max.pop$), maximum age ($max.age$), and fertility rate ($fertility$). The default values of maximum population, maximum age, and fertility rate were 20, 80, and 0.2 respectively.

<<r,echo=FALSE>>=
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)

  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)

  numPlots = length(plots)

  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                    ncol = cols, nrow = ceiling(numPlots/cols))
  }

 if (numPlots==1) {
    print(plots[[1]])

  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))

    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))

      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}
@

<<cache=TRUE>>=
# Load simulation data
pop<-read.table("../simulations/popsim.tab",sep="\t",header=TRUE)
age<-read.table("../simulations/agesim.tab",sep="\t",header=TRUE)
fer<-read.table("../simulations/fertilitysim.tab",sep="\t",header=TRUE)
@

<<cache=TRUE>>=
p1<-ggplot(pop,aes(x=as.factor(max.pop),y=log(survival.time))) +
  geom_boxplot()
p2<-ggplot(age,aes(x=as.factor(max.age),y=log(survival.time))) +
  geom_boxplot()
p3<-ggplot(fer,aes(x=as.factor(fertility),y=log(survival.time))) +
  geom_boxplot()
multiplot(p1,p2,p3,cols=2)
@

There seemed to be a linear relationship between maximum population size $2k$ and the log transformed survival time. This linear relationship is consistent with the view that a larger population allows more robust population to random changes in female/male composition. 

However, increasing the fertility rate of the females in the population increased the robustness of the population up to a certain point. After 0.2, the log transformed survival time still increases but at a slower rate.

Increasing the max age of the population, decreased the log transformed survival time. This result is consistent since increasing the average age decreases the proportion of fertile females in the total population. This effectively reduces the number of births and deaths before reaching the maximum $2k$ population.

<<cache=TRUE>>=
p1<-ggplot(pop, aes(x=log(survival.time)))+geom_histogram(binwidth=10/30)+facet_grid(max.pop~.)
p2<-ggplot(age, aes(x=log(survival.time)))+geom_histogram(binwidth=10/30)+facet_grid(max.age~.)
p3<-ggplot(fer, aes(x=log(survival.time)))+geom_histogram(binwidth=10/30)+facet_grid(fertility~.)
multiplot(p1,p2,p3,cols=2)
@

In order to better understand the distribution of log survival time, we plotted histograms under each of the results. For the most part, the distributions looked like gamma distributions. The gamma function has two parameters ($\alpha$, $\beta$).

% scrap after this
<<echo=FALSE,eval=FALSE>>=
qplot(as.factor(max.pop),log(survival.time),data=pop,geom="boxplot")
qplot(as.factor(max.age),log(survival.time),data=age,geom="boxplot")
qplot(as.factor(fertility),log(survival.time),data=fer,geom="boxplot")

qplot(log(survival.time),data=pop,binwidth=10/30)+facet_grid(max.pop~.)
qplot(log(survival.time),data=age,binwidth=10/30)+facet_grid(max.age~.)
qplot(log(survival.time),data=fer,binwidth=10/30)+facet_grid(fertility~.)
@

